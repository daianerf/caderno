library(car) # para Anova()
library(readxl)
# Importar dados - Google Sheets
# estande <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=401662555#gid=401662555") ou:
estande <- read_excel("dados-diversos.xlsx", "estande") # Planilha excel
# Gráfico geral para visualizar a relação entre tratamento e número de plantas
estande |>
ggplot(aes(trat, nplants)) +
geom_point(color = "blue") + # Pontos individuais
geom_smooth(method = "lm", se = FALSE, color = "black") + # Linha de regressão
facet_wrap(~ exp) + # Um gráfico por experimento
theme_minimal() + # Tema limpo
labs(
x = "% de inóculo na semente",
y = "Número de plantas"
)
# Para ajustar para uma regressão linear usa-se o argumento method = “lm” dentro da função geom_smooth.
# Filtrar experimento 1 e calcular média por tratamento
exp1 <- estande |>
filter(exp == 1) |>
group_by(trat) |>
summarise(nplants2 = mean(nplants, na.rm = TRUE))
# Gráfico da média
exp1 |>
ggplot(aes(trat, nplants2)) +
geom_point() +
ylim(20, 60)
# Regressão linear com bloco (precisa existir a variável 'bloco')
exp1_model <- estande |>
filter(exp == 1)
m_exp1 <- lm(nplants ~ trat + bloco, data = exp1_model)
summary(m_exp1)
exp2 <- estande |>
filter(exp == 2)
m_exp2 <- lm(nplants ~ trat, data = exp2)
summary(m_exp2)
exp3 <- estande |>
filter(exp == 3)
m_exp3 <- lm(nplants ~ trat, data = exp3)
summary(m_exp3)
library(report)
report(m_exp3)
# Modelo misto com efeitos aleatórios de experimento e bloco
m_misto <- lmer(nplants ~ trat + (1 | exp/bloco), data = estande)
# Intervalos de confiança e sumário do modelo
confint(m_misto)
summary(m_misto)
# ANOVA para verificar significância dos efeitos fixos
Anova(m_misto) # com A maiúsculo
# Gráfico com diferentes linhas de regressão para comparação
estande |>
ggplot(aes(trat, nplants, color = factor(exp))) +
geom_point() +
geom_abline(intercept = 69.74, slope = -0.568, linewidth = 2) + # Linha principal
geom_abline(intercept = 43, slope = -0.73, linetype = "dashed") + # Linha comparativa
geom_abline(intercept = 96, slope = -0.40, linetype = "dashed")   # Outra linha comparativa
library(lme4)
mix <- lmer(nplants ~trat + (trat | exp),
data = estande)
summary(mix)
library(car)
Anova(mix)
estande <- read_excel("dados-diversos.xlsx", "estande")
estande |>
ggplot(aes(trat, nplants, group = exp))+
geom_point()+
#facet_wrap(~ exp)+
geom_smooth(se =  F, method = "lm")
lm1 <- lm(nplants ~ trat, data = exp3)
summary(lm1)
glm1 <- stats::glm(nplants ~ trat, family = stats::gaussian(), data = exp3)
glm2 <- stats::glm(nplants ~ trat, family = stats::poisson(link = "log"), data = exp3)
AIC(glm1)
AIC(glm2)
AIC(glm2)
summary(glm1)
summary(glm2)
# Pacote para importar tabela do Google Sheets
library(gsheet)
# Importar dados
fungi <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652")
library(dplyr)
library(ggplot2)
# Agrupar por fungo e dose, calcular média de germinação
fungi_summary <- fungi |>
group_by(code, dose) |>
summarise(germination = mean(germination, na.rm = TRUE), .groups = "drop")
# Plotar a germinação por dose para cada fungo
fungi_summary |>
ggplot(aes(x = dose, y = germination)) +
geom_point() +
geom_line() +
facet_wrap(~ code) +
theme_minimal() +
labs(title = "Germinação por dose para cada fungo",
x = "Dose",
y = "Germinação média")
# Filtrar dados para o fungo FGT43
FGT43 <- fungi_summary |>
filter(code == "FGT43")
library(drc)
# Ajustar modelo Weibull 2.3
m_wb <- drm(germination ~ dose,
data = FGT43,
fct = W2.3())
# Ajustar modelo log-logístico 3 parâmetros (LL.3)
m_ll3 <- drm(germination ~ dose,
data = FGT43,
fct = LL.3())
# Comparar AIC para escolher o melhor modelo
AIC(m_wb)
AIC(m_ll3)
# Resumo do melhor modelo (exemplo: LL.3)
summary(m_ll3)
# Plotar ajuste do modelo LL.3
plot(m_ll3, main = "Ajuste do modelo LL.3 para FGT43")
# Estimar EC50 (dose para 50% do efeito)
ED(m_ll3, 50, interval = "delta")
# Instale o pacote se ainda não tiver: install.packages("ec50estimator")
library(ec50estimator)
# Estima EC50 para cada fungo (isolate_col = "code"), podendo estratificar por estado (strata_col)
df_ec50 <- estimate_EC50(germination ~ dose,
data = fungi,
isolate_col = "code",
strata_col = "state",  # pode omitir se não tiver
interval = "delta",
fct = drc::LL.3())
library(ggplot2)
# Gráfico de pontos ordenando pelo valor da estimativa (menor para maior EC50)
df_ec50 |>
ggplot(aes(x = reorder(ID, Estimate), y = Estimate)) +
geom_point() +
coord_flip() +
labs(x = "Fungos (ordenados por EC50)", y = "EC50 estimado") +
theme_minimal()
# Histograma da distribuição dos valores EC50
df_ec50 |>
ggplot(aes(x = Estimate)) +
geom_histogram(bins = 5, color = "black", fill = "steelblue") +
labs(title = "Distribuição dos valores EC50 estimados", x = "EC50", y = "Frequência") +
theme_minimal()
#Carregando pacotes
library(ggplot2)
library(gsheet)
library(dplyr)
#importando o comjunto de dados
dat <- gsheet2tbl("https://docs.google.com/spreadsheets/d/15pCj0zljvd-TGECe67OMt6sa21xO8BqUgv4d-kU8qi8/edit#gid=0")
options(scipen = 999)
dat2 <- dat |>
dplyr::select(-Isolate, Population) |>
group_by(Code, Year, Dose) |>
summarise(GC_mean = mean(GC), .groups = "drop")
FGT152 <- dat2 |>
filter(Code == "FGT152")
FGT152 |>
ggplot(aes(factor(Dose), GC_mean))+
geom_point()+
geom_line()+
facet_wrap(~ Code)
library(drc)
drc1 <- drm(GC_mean ~ Dose, data = FGT152,
fct = LL.3())
AIC(drc1)
summary(drc1)
plot(drc1)
ED(drc1, 50)
drc1 <- drm(GC_mean ~ Dose, data = FGT152,
fct = W1.3())
AIC(drc1)
summary(drc1)
plot(drc1)
ED(drc1, 50)
library(ec50estimator)
df_ec50 <- estimate_EC50(GC_mean ~ Dose,
data = dat2,
isolate_col = "Code",
interval = "delta",
fct = drc::LL.3())
df_ec50 |>
ggplot(aes(Estimate, reorder(ID, Estimate)))+
geom_point()+
geom_errorbar(aes(xmin = Lower,
xmax = Upper), width = 0.1)+
xlim(0,30)
library(tidyverse)
library(readxl)
library(ExpDes.pt)
# Carregue o pacote
library(ExpDes.pt)
dic(trat, resp, quali = TRUE, mcomp = "tukey", sigT = 0.05)
library(tidyverse)
library(readxl)
library(ExpDes.pt)
# Carregue o pacote
library(ExpDes.pt)
dic(trat, resp, quali = TRUE, mcomp = "tukey", sigT = 0.05)
library(tidyverse)
library(readxl)
library(ExpDes.pt)
# Carregue o pacote
library(ExpDes.pt)
# Fator: tratamentos (cultivares)
trat <- c(rep("A", 4), rep("B", 4), rep("C", 4), rep("D", 4))
# Resposta: produtividade em kg/ha
resp <- c(5000, 5200, 5100, 4950,
5300, 5400, 5350, 5250,
4800, 4700, 4900, 4750,
5100, 5000, 4950, 5050)
dic(trat, resp, quali = TRUE, mcomp = "tukey", sigT = 0.05)
library(tidyverse)
library(readxl)
library(ExpDes.pt)
# Carregue o pacote
library(ExpDes.pt)
dic(trat, resp, quali = TRUE, mcomp = "tukey", sigT = 0.05)
insects <- InsectSprays
insects$count2 <- sqrt(insects$count)
dic(insects$spray,
insects$count2,
mcomp = "tukey")
#Agrupamento pelo teste de Scott Knott: O teste agrupa médias e serve para 1 fator apenas.
dic(insects$spray,
insects$count2,
mcomp = "sk")
# Tratamentos (cultivares)
trat <- c(rep("A",4), rep("B",4), rep("C",4), rep("D",4), rep("E",4))
# Blocos (repetições)
bloco <- rep(1:4, 5)
# Produtividade em kg/ha (variável resposta)
resp <- c(1800, 1850, 1750, 1820,  # A
2100, 2150, 2080, 2120,  # B
1700, 1680, 1720, 1690,  # C
1950, 1980, 1930, 1970,  # D
2200, 2250, 2220, 2180)  # E
dbc(trat, bloco, resp, quali = TRUE, mcomp = "sk", sigT = 0.05)
#Carregando pacotes
library(tidyverse)
library(readxl)
library(janitor)
library(ggplot2)
library(dplyr)
library(rstatix)
#Importando dados
survey <- read_excel("dados-diversos.xlsx","survey")
survey |>
tabyl (year, species) |>
adorn_percentages()
survey |>
filter(residue != "NA") |>
count(residue, species) |>
ggplot(aes(residue, n, fill = species)) +
geom_col() +
scale_fill_brewer(palette = "Greens") +
theme_minimal() +
labs(x = "Resíduo", y = "Frequência", fill = "Espécie")
q <- table (survey$residue, survey$species)
chisq.test(q)
fisher.test(q)
q <- table (survey$residue, survey$inc_class)
chisq.test(q)
survey |>
filter(residue != "NA") |>
count(residue, inc_class) |>
ggplot(aes(residue, n, fill = inc_class)) +
geom_col() +
scale_fill_brewer(palette = "Greens") +
theme_minimal() +
labs(
x = "Resíduo",
y = "Frequência",
fill = "Classe de Incidência"
)
survey |> count (year)
#Frequência de ocorrência por ano
table (survey$year, survey$species)
curve <- read_excel("dados-diversos.xlsx","curve")
curve2 <- curve |>
group_by(Irrigation, day) |>
summarise(mean_severity = mean (severity),
sd_severity = sd(severity))
curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
geom_point()+
geom_line()
curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
geom_point()+
geom_errorbar(aes(ymin=mean_severity - sd_severity,
ymax = mean_severity + sd_severity),
width = 0.1)+
geom_line()
library(epifitter)
curve3 <- curve |>
group_by(Irrigation, rep) |>
summarise(audpc = AUDPC(day, severity,
y_proportion = F)) |>
pivot_wider(1, names_from = Irrigation,
values_from = audpc)
t.test(curve3$Drip, curve$Furrow)
library(gsheet)
tw <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1t5xftb0xSRPNFhM7h_MiPNtwt2UFUcm9/edit#gid=1594889893")
tw |>
group_by(cult,silicio,hai) |>
summarise (mean_lesion = mean (as.numeric(lesion_size)),
sd_lesion = sd(lesion_size)) |>
ggplot(aes(hai,mean_lesion, color = silicio))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=mean_lesion - sd_lesion,
ymax = mean_lesion + sd_lesion),
width = 0.1)+
facet_wrap(~cult)+
labs (y = "Lesion size (mm)", x = "Hours after inoculation")+
ggthemes::theme_few()+
scale_color_manual(values = c("#1f78b4", "#6baed6", "#9ecae1", "#c6dbef"))
library(agricolae)
library(dplyr)
tw2 <- tw |>
group_by(exp,cult,silicio,rep) |>
summarise(audpc=audpc(lesion_size, hai)) |>
filter (audpc > 0)
#Visualização com ggplot2
#Aplicando a AUDPC e visualizando em boxplot
tw2 |>
ggplot(aes(cult,audpc, color = silicio))+
geom_boxplot()+
facet_wrap(~ exp)
aov1 <- aov(sqrt(audpc) ~exp*cult*silicio, data = tw2)
summary(aov1)
library(performance)
check_normality(aov1)
check_heteroscedasticity(aov1)
library(emmeans)
m1 <- emmeans (aov1, ~cult | silicio, type = "response")
# Tabela de frequência
tab <- table(survey$residue, survey$species)
# Teste qui-quadrado
chisq.test(tab)
# Visualização
library(ggplot2)
survey |>
count(residue, species) |>
ggplot(aes(residue, n, fill = species)) +
geom_col(position = "dodge") +
scale_fill_manual(values = c("#2171b5", "#6baed6", "#9ecae1", "#c6dbef")) +
labs(x = "Resíduo", y = "Frequência", fill = "Espécie") +
theme_minimal()
library(epifitter)
curve3 <- curve |>
group_by(Irrigation, rep) |>
summarise(audpc = AUDPC(day, severity,
y_proportion = F)) |>
pivot_wider(1, names_from = Irrigation,
values_from = audpc)
library(emmeans)
m1 <- emmeans (aov1, ~cult | silicio, type = "response")
library(epifitter)
curve3 <- curve |>
group_by(Irrigation, rep) |>
summarise(audpc = AUDPC(day, severity,
y_proportion = F)) |>
pivot_wider(1, names_from = Irrigation,
values_from = audpc)
curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
geom_point()+
geom_errorbar(aes(ymin=mean_severity - sd_severity,
ymax = mean_severity + sd_severity),
width = 0.1)+
geom_line()
#Carregando pacotes
library(tidyverse)
library(readxl)
library(janitor)
library(ggplot2)
library(dplyr)
library(rstatix)
#Importando dados
survey <- read_excel("dados-diversos.xlsx","survey")
survey |>
tabyl (year, species) |>
adorn_percentages()
survey |>
filter(residue != "NA") |>
count(residue, species) |>
ggplot(aes(residue, n, fill = species)) +
geom_col() +
scale_fill_brewer(palette = "Greens") +
theme_minimal() +
labs(x = "Resíduo", y = "Frequência", fill = "Espécie")
q <- table (survey$residue, survey$species)
chisq.test(q)
fisher.test(q)
q <- table (survey$residue, survey$inc_class)
chisq.test(q)
survey |>
filter(residue != "NA") |>
count(residue, inc_class) |>
ggplot(aes(residue, n, fill = inc_class)) +
geom_col() +
scale_fill_brewer(palette = "Greens") +
theme_minimal() +
labs(
x = "Resíduo",
y = "Frequência",
fill = "Classe de Incidência"
)
survey |> count (year)
curve <- read_excel("dados-diversos.xlsx","curve")
curve2 <- curve |>
group_by(Irrigation, day) |>
summarise(mean_severity = mean (severity),
sd_severity = sd(severity))
curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
geom_point()+
geom_line()
curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
geom_point()+
geom_errorbar(aes(ymin=mean_severity - sd_severity,
ymax = mean_severity + sd_severity),
width = 0.1)+
geom_line()
library(epifitter)
curve3 <- curve |>
group_by(Irrigation, rep) |>
summarise(audpc = AUDPC(day, severity,
y_proportion = F)) |>
pivot_wider(1, names_from = Irrigation,
values_from = audpc)
t.test(curve3$Drip, curve$Furrow)
library(gsheet)
tw <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1t5xftb0xSRPNFhM7h_MiPNtwt2UFUcm9/edit#gid=1594889893")
tw |>
group_by(cult,silicio,hai) |>
summarise (mean_lesion = mean (as.numeric(lesion_size)),
sd_lesion = sd(lesion_size)) |>
ggplot(aes(hai,mean_lesion, color = silicio))+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=mean_lesion - sd_lesion,
ymax = mean_lesion + sd_lesion),
width = 0.1)+
facet_wrap(~cult)+
labs (y = "Lesion size (mm)", x = "Hours after inoculation")+
ggthemes::theme_few()+
scale_color_manual(values = c("#1f78b4", "#6baed6", "#9ecae1", "#c6dbef"))
library(agricolae)
library(dplyr)
tw2 <- tw |>
group_by(exp,cult,silicio,rep) |>
summarise(audpc=audpc(lesion_size, hai)) |>
filter (audpc > 0)
#Visualização com ggplot2
#Aplicando a AUDPC e visualizando em boxplot
tw2 |>
ggplot(aes(cult,audpc, color = silicio))+
geom_boxplot()+
facet_wrap(~ exp)
aov1 <- aov(sqrt(audpc) ~exp*cult*silicio, data = tw2)
summary(aov1)
library(MASS)
library(mvtnorm)
library(survival)
library(TH.data)
library(multcomp)
library(multcompView)
cld(aov2_means)
library(tidyverse)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
insects <- tibble::as_tibble(InsectSprays) |>
dplyr::select(spray, count)
insects
library(ggplot2)
insects |>
ggplot(aes(spray, count)) +
geom_boxplot(fill = "lightblue")
aov2 <- aov(count ~ spray, data = insects)
summary(aov2)
library(performance)
check_normality(aov2)
check_heteroscedasticity(aov2)
aov2 <- aov(sqrt(count) ~ spray, data = insects)
summary(aov2)
check_normality(aov2)
check_heteroscedasticity(aov2)
library(agricolae)
kruskal.test(count ~ spray, data = insects)
kruskal(insects$count, insects$spray,
console = TRUE)
aov2 <- aov(count ~ spray, data = insects)
summary(aov2)
check_normality(aov2)
check_heteroscedasticity(aov2)
library(emmeans)
aov2_means <- emmeans(aov2, ~ spray,
type = "response")
aov2_means
pwpm(aov2_means)
library(MASS)
library(mvtnorm)
library(survival)
library(TH.data)
library(multcomp)
library(multcompView)
cld(aov2_means)
library(DHARMa)
glm1 <- glm(count ~spray,
data = insects,
family = poisson(link = "identity"))
plot(simulateResiduals(glm1))
summary(glm1)
glm1_means <- emmeans(glm1, ~ spray)
cld(glm1_means)
