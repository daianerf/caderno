---
format: html
editor: visual
---

# **Comparação de Frequência**

A comparação de frequência é uma análise usada para verificar se há associação ou diferença significativa entre categorias de variáveis categóricas (qualitativas). É muito comum em experimentos, questionários e dados de contagem.

```{r warning(FALSE)}
#Carregando pacotes
library(tidyverse)
library(readxl)
library(janitor)
library(ggplot2)
library(dplyr)
library(rstatix)

#Importando dados
survey <- read_excel("dados-diversos.xlsx","survey")
```

A função `tabyl()` cria uma tabela de frequência tabular, mostrando a contagem de ocorrências de diferentes combinações de valores em variáveis categóricas.

```{r}
survey |> 
  tabyl (year, species) |> 
  adorn_percentages()
```

## **Gráfico de barras - frequência**

```{r}
survey |> 
  filter(residue != "NA") |> 
  count(residue, species) |> 
  ggplot(aes(residue, n, fill = species)) +
  geom_col() +
  scale_fill_brewer(palette = "Greens") +
  theme_minimal() +
  labs(x = "Resíduo", y = "Frequência", fill = "Espécie")
```

## **Frequência de classe**

A função `chisq.test()` é utilizada para realizar testes do qui-quadrado em duas principais situações:

-   Testes de independência em tabelas de contingência — verifica se existe associação estatística entre duas variáveis categóricas;

-   Testes de aderência (ou qualidade de ajuste) — avalia se a distribuição observada de uma variável categórica difere significativamente de uma distribuição esperada (teórica).

Essa função retorna estatísticas como o valor do qui-quadrado, os graus de liberdade e o valor-p, que ajudam a determinar se as diferenças observadas são estatisticamente significativas.

```{r}
q <- table (survey$residue, survey$species)
chisq.test(q)
```

## **Para frequências mais baixas**

A função `fisher.test()` realiza o teste exato de Fisher, que é utilizado para avaliar a independência entre linhas e colunas em uma tabela de contingência, especialmente quando os valores esperados são baixos (frequências menores que 5), condição na qual o teste do qui-quadrado pode não ser confiável.

Esse teste verifica se há evidência de associação entre duas variáveis categóricas, assumindo que as margens da tabela (totais de linha e coluna) são fixas. Ele calcula exatamente a probabilidade de observar uma distribuição tão extrema quanto a observada, ou mais, sob a hipótese nula de independência.

```{r}
fisher.test(q)
```

```{r}
q <- table (survey$residue, survey$inc_class)
chisq.test(q)
```

```{r}
survey |> 
  filter(residue != "NA") |> 
  count(residue, inc_class) |> 
  ggplot(aes(residue, n, fill = inc_class)) +
  geom_col() +
  scale_fill_brewer(palette = "Greens") +
  theme_minimal() +
  labs(
    x = "Resíduo",
    y = "Frequência",
    fill = "Classe de Incidência"
  )
```

## **Cruzamento entre variáveis**

```{r}
survey |> count (year)
```

```{r}
#Frequência de ocorrência por ano

table (survey$year, survey$species)
```

```{r}
curve <- read_excel("dados-diversos.xlsx","curve")

curve2 <- curve |> 
  group_by(Irrigation, day) |> 
  summarise(mean_severity = mean (severity),
            sd_severity = sd(severity))

curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
  geom_point()+
  geom_line()
```

```{r}
curve2 |> ggplot(aes(day,mean_severity, color=Irrigation))+
  geom_point()+
  geom_errorbar(aes(ymin=mean_severity - sd_severity,
                    ymax = mean_severity + sd_severity),
                width = 0.1)+
  geom_line()
```

```{r frequencia, warning=FALSE}

library(epifitter)

curve3 <- curve |> 
  group_by(Irrigation, rep) |> 
  summarise(audpc = AUDPC(day, severity,
                          y_proportion = F)) |> 
  pivot_wider(1, names_from = Irrigation,
            values_from = audpc)

t.test(curve3$Drip, curve$Furrow)
```

Exemplo:

```{r}
library(gsheet)

tw <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1t5xftb0xSRPNFhM7h_MiPNtwt2UFUcm9/edit#gid=1594889893")
tw |> 
  group_by(cult,silicio,hai) |> 
  summarise (mean_lesion = mean (as.numeric(lesion_size)),
             sd_lesion = sd(lesion_size)) |> 
  ggplot(aes(hai,mean_lesion, color = silicio))+
  geom_line()+
  geom_point()+
  geom_errorbar(aes(ymin=mean_lesion - sd_lesion,
                    ymax = mean_lesion + sd_lesion),
                width = 0.1)+
  facet_wrap(~cult)+
   labs (y = "Lesion size (mm)", x = "Hours after inoculation")+
  ggthemes::theme_few()+
scale_color_manual(values = c("#1f78b4", "#6baed6", "#9ecae1", "#c6dbef"))
```

# **Análise da área abaixo da curva de progresso da doença - AUDPC**

A AUDPC (*Area Under the Disease Progress Curve*) é uma medida utilizada na fitopatologia para quantificar e comparar o progresso de doenças em plantas ao longo do tempo. É calculada a partir de observações repetidas da severidade ou tamanho das lesões ao longo do tempo. Para isso, constrói-se uma curva com o tempo no eixo x e a variável de interesse (como o tamanho da lesão) no eixo y. Em seguida, calcula-se a área sob essa curva. Valores elevados de AUDPC refletem maior intensidade ou impacto da doença, enquanto valores mais baixos indicam menor progressão ou severidade.

```{r}
library(agricolae)
library(dplyr)

tw2 <- tw |>
  group_by(exp,cult,silicio,rep) |> 
  summarise(audpc=audpc(lesion_size, hai)) |> 
  filter (audpc > 0)

#Visualização com ggplot2
#Aplicando a AUDPC e visualizando em boxplot

tw2 |> 
  ggplot(aes(cult,audpc, color = silicio))+
  geom_boxplot()+
  facet_wrap(~ exp)
```

## **Teste ANOVA**

Os resultados da análise de variância podem ajudar a identificar quais variáveis e interações têm efeito significativo na variável resposta audpc.

```{r}
aov1 <- aov(sqrt(audpc) ~exp*cult*silicio, data = tw2)
summary(aov1)
```

```{r}
library(performance)
check_normality(aov1)
```

```{r}
check_heteroscedasticity(aov1)
```

```{r carregando-pacotes, warning=FALSE}
library(emmeans)
m1 <- emmeans (aov1, ~cult | silicio, type = "response")
```

### Exemplo

```{r}
# Tabela de frequência
tab <- table(survey$residue, survey$species)

# Teste qui-quadrado
chisq.test(tab)

# Visualização
library(ggplot2)
survey |> 
  count(residue, species) |> 
  ggplot(aes(residue, n, fill = species)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("#2171b5", "#6baed6", "#9ecae1", "#c6dbef")) +
  labs(x = "Resíduo", y = "Frequência", fill = "Espécie") +
  theme_minimal()
```
